//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::{entity::prelude::*, ActiveValue};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "series_sources")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub for_series_id: i32,
    pub series_site: String,
    pub series_site_id: String,
    pub created_at: Option<String>,
    pub updated_at: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::series::Entity",
        from = "Column::ForSeriesId",
        to = "super::series::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Series,
}

impl Related<super::series::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Series.def()
    }
}

#[async_trait::async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        let mut this = self;
        let now = chrono::Utc::now().to_rfc3339();
        if insert {
            this.created_at = ActiveValue::Set(Some(now.clone()));
        } else {
            this.created_at = ActiveValue::NotSet;
        }
        this.updated_at = ActiveValue::Set(Some(now));
        Ok(this)
    }
}
